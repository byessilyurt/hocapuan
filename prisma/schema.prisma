// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enums
enum UserRole {
  admin
  user
}

enum ReviewStatus {
  approved
  pending
  hidden
  deleted
}

/// Models
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String
  emailVerifiedAt  DateTime?
  isEduVerified    Boolean   @default(false)
  role             UserRole  @default(user)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  reviews          Review[]
  helpfulVotes     HelpfulVote[]
  reports          Report[]
  accounts         Account[]
  sessions         Session[]
}

model University {
  id        String    @id @default(cuid())
  name      String
  city      String?
  slug      String    @unique
  createdAt DateTime  @default(now())

  // Relations
  departments Department[]
  instructors Instructor[]

  @@index([name])
}

model Department {
  id            String      @id @default(cuid())
  universityId  String
  name          String
  slug          String

  university    University  @relation(fields: [universityId], references: [id], onDelete: Cascade)
  instructors   Instructor[]

  @@unique([universityId, slug])
  @@index([universityId, name])
}

model Instructor {
  id            String      @id @default(cuid())
  universityId  String
  departmentId  String
  firstName     String
  lastName      String
  slug          String
  overallRating Float       @default(0)
  reviewCount   Int         @default(0)
  createdAt     DateTime    @default(now())

  university    University  @relation(fields: [universityId], references: [id], onDelete: Cascade)
  department    Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  reviews       Review[]

  @@unique([universityId, slug])
  @@index([lastName, firstName])
  @@index([universityId, departmentId])
}

model Review {
  id              String        @id @default(cuid())
  userId          String
  instructorId    String
  overall         Int
  clarity         Int
  helpfulness     Int
  workload        Int
  wouldTakeAgain  Boolean
  courseCode      String?
  term            String?
  grade           String?
  text            String
  isAnonymous     Boolean       @default(false)
  status          ReviewStatus  @default(pending)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  instructor      Instructor    @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  tags            ReviewTag[]
  helpfulVotes    HelpfulVote[]
  reports         Report[]

  @@index([instructorId, status])
  @@index([createdAt])
}

model ReviewTag {
  id        String  @id @default(cuid())
  reviewId  String
  tag       String

  review    Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
}

model HelpfulVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  createdAt DateTime @default(now())

  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@index([userId])
}

model Report {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String?
  reason    String
  details   String?
  createdAt DateTime @default(now())

  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([reviewId])
  @@index([createdAt])
}

/// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
